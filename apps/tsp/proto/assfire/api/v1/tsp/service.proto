syntax = "proto3";

package assfire.api.v1.tsp;
option go_package = "assfire.org/api/v1/tsp";

import "assfire/api/v1/router/concepts.proto";
import "assfire/api/v1/scheduler/concepts.proto";
import "assfire/api/v1/tsp/concepts.proto";
import "google/api/annotations.proto";

message StartTspRequest {
  TspTask task = 1;
  TspAlgorithmType algorithm_type = 2;
  TspSolverSettings settings = 3;
  assfire.api.v1.router.RoutingProfile routing_profile = 4;
}

message StartTspResponse {
  string solutionId = 1;
}

message StopTspRequest {
  string solutionId = 1;
  bool get_latest_solution = 2;
}

message StopTspResponse {
  TspSolution solution = 1;
}

message PauseTspRequest {
  string solutionId = 1;
  bool get_latest_solution = 2;
}

message PauseTspResponse {
  TspSolution solution = 1;
}

message GetSolutionRequest {
  string solution_id = 1;
}

message GetSolutionResponse {
  TspSolution solution = 1;
}

message SubscribeForSolutionRequest {
  string solutionId = 1;
  int32 throttling_interval_ms = 2;
}

message SubscribeForSolutionResponse {
  TspSolution solution = 1;
}

service TspService {
  rpc StartTsp(StartTspRequest) returns (StartTspResponse) {
    option (google.api.http) = {
      post: "/v1/optimize/tsp/start"
    };
  }

  rpc PauseTsp(PauseTspRequest) returns (PauseTspResponse) {
    option (google.api.http) = {
      get: "/v1/optimize/tsp/pause"
    };
  }

  rpc StopTsp(StopTspRequest) returns (StopTspResponse) {
    option (google.api.http) = {
      get: "/v1/optimize/tsp/stop"
    };
  }

  rpc GetSolution(GetSolutionRequest) returns (GetSolutionResponse) {
    option (google.api.http) = {
      get: "/v1/optimize/tsp/solution"
    };
  }

  rpc SubscribeForSolution(SubscribeForSolutionRequest) returns (stream SubscribeForSolutionResponse);

}