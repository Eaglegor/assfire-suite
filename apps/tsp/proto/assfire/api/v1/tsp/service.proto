syntax = "proto3";

package assfire.api.v1.tsp;
option go_package = "assfire.org/api/v1/tsp";

import "assfire/api/v1/router/concepts.proto";
import "assfire/api/v1/scheduler/concepts.proto";
import "assfire/api/v1/tsp/concepts.proto";
import "google/api/annotations.proto";

message SolveTspRequest {
  TspTask task = 1;
  TspAlgorithmType algorithm_type = 2;
  TspSolverSettings settings = 3;
  assfire.api.v1.router.RoutingProfile routing_profile = 4;
}

message SolveTspResponseStatus {
  enum Code {
    SOLVE_TSP_RESPONSE_STATUS_CODE_UNSPECIFIED = 0;
    SOLVE_TSP_RESPONSE_STATUS_CODE_OK = 1;
    SOLVE_TSP_RESPONSE_STATUS_CODE_ERROR = 2;
  }
  Code code = 1;
  string message = 2;
}

message SolveTspResponse {
  TspSolution solution = 1;
  SolveTspResponseStatus status = 2;
}

service TspService {
  rpc SolveTsp(SolveTspRequest) returns (SolveTspResponse) {
    option (google.api.http) = {
      get: "/v1/optimize/tsp"
    };
  }

  rpc SolveTspContinuosly(SolveTspRequest) returns (stream SolveTspResponse);
}