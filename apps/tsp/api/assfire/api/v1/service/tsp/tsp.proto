syntax="proto3";

package assfire.api.v1.service.tsp;
option go_package = "assfire.org/api/v1/service/tsp";

import "assfire/api/v1/model/optimization/transport/transport.proto";
import "google/api/annotations.proto";

message TspTask {
  repeated assfire.api.v1.model.optimization.transport.Job jobs = 1;
  assfire.api.v1.model.optimization.transport.Resource resource = 2;
}

message TspSolution {
  repeated assfire.api.v1.model.optimization.transport.Waypoint waypoints = 1;
  assfire.api.v1.model.optimization.transport.TransportationCosts transportation_costs = 2;
}

enum TspAlgorithm {
  TSP_ALGORITHM_UNSPECIFIED = 0;
  TSP_ALGORITHM_TWO_OPT = 1;
}

enum TspInitialSolutionStrategy {
  TSP_INITIAL_SOLUTION_STRATEGY_UNSPECIFIED = 0;
  TSP_INITIAL_SOLUTION_STRATEGY_AS_IS = 1;
}

message Settings {
  TspAlgorithm algorithm = 1;
  TspInitialSolutionStrategy initial_solution_strategy = 2;
}

message ResponseStatus {
  enum Code {
    RESPONSE_STATUS_CODE_UNSPECIFIED = 0;
    RESPONSE_STATUS_CODE_OK = 1;
    RESPONSE_STATUS_CODE_IN_PROGRESS = 2;
    RESPONSE_STATUS_CODE_ERROR = 3;
  }
  Code code = 1;
  string message = 2;
  int32 progress = 3;
}

message SolveTspSyncRequest {
  TspTask task = 1;
  Settings settings = 2;
}

message SolveTspSyncResponse {
  TspSolution solution = 1;
  ResponseStatus status = 2;
}

message SolveTspStreamingRequest {
  TspTask task = 1;
  Settings settings = 2;
}

message SolveTspStreamingResponse {
  TspSolution solution = 1;
  ResponseStatus status = 2;
}

service TspService {
  rpc SolveTspSync(SolveTspSyncRequest) returns (SolveTspSyncResponse){
    option (google.api.http) = {
      post: "/v1/sync"
      body: "*"
    };
  };
  rpc SolveTspStreaming(SolveTspStreamingRequest) returns (stream SolveTspStreamingResponse) {
    option (google.api.http) = {
      post: "/v1/streaming"
      body: "*"
    };
  }
}