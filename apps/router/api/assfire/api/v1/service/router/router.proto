syntax="proto3";

package assfire.api.v1.service.router;
option go_package = "assfire.org/api/v1/service/router";

import "assfire/api/v1/model/routing/routing.proto";
import "google/api/annotations.proto";

message GetSingleRouteRequest {
  assfire.api.v1.model.routing.Location origin = 1;
  assfire.api.v1.model.routing.Location destination = 2;
  assfire.api.v1.model.routing.RoutingOptions options = 3;
}

message ResponseStatus {
  enum Code {
    OK = 0;
    ERROR = 1;
  }
  Code code = 1;
  string message = 2;
}

message GetSingleRouteResponse {
  assfire.api.v1.model.routing.RouteInfo route_info = 1;
  ResponseStatus status = 2;
}

message GetRoutesBatchRequest {
  repeated assfire.api.v1.model.routing.Location origins = 1;
  repeated assfire.api.v1.model.routing.Location destinations = 2;
  assfire.api.v1.model.routing.RoutingOptions options = 3;
}

message GetRoutesBatchResponse {
  repeated assfire.api.v1.model.routing.RouteInfo route_infos = 1;
  ResponseStatus status = 2;
}

service RouterService {
  rpc GetSingleRoute(GetSingleRouteRequest) returns (GetSingleRouteResponse){
    option (google.api.http) = {
      get: "/v1/route"
    };
  }
  rpc GetRoutesBatch(GetRoutesBatchRequest) returns (stream GetRoutesBatchResponse) {}
  rpc GetStreamingRoutesBatch(stream GetRoutesBatchRequest) returns (stream GetRoutesBatchResponse) {}
}