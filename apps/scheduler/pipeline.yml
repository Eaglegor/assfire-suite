stages:
  - build
  - test
  - rpm
  - docker
  - publish
  - deploy

variables:
  CMAKE_OPTIONS: |
    -DASSFIRE_APPLICATION_RELEASE_VERSION=$APPLICATION_VERSION
    -DASSFIRE_DEBUG_MODE=OFF
    -DCMAKE_BUILD_TYPE=Release
    -DASSFIRE_GENERATE_GRPC_GATEWAYS=True
    -DASSFIRE_APPS_BUILD_ALL=OFF
    -DASSFIRE_APPS_BUILD_SCHEDULER=ON
    -DASSFIRE_APPS_BUILD_ROUTER=ON

.configure:
  before_script:
    - mkdir out
    - cd out
    - cmake -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" $CMAKE_OPTIONS ../
    - cd ..

build:
  extends: .configure
  stage: build
  image: $BUILD_IMAGE_NAME
  artifacts:
    paths:
      - out/*
    expire_in: 1 hour
  script:
    - cd out
    - make -j

test:
  image: $BUILD_IMAGE_NAME
  stage: test
  script:
    - cd out
    - make test
  dependencies:
    - build
  needs:
    - build

.install-service:
  before_script:
    - rpm -i --nodeps out/assfire-${APPLICATION_VERSION}-Linux-scheduler.rpm
    - rpm -i --nodeps out/assfire-${APPLICATION_VERSION}-Linux-scheduler-grpc-gateway.rpm

helm-lint:
  image: $BUILD_IMAGE_NAME
  stage: test
  script:
    - cd out/apps/scheduler/helm/assfire-scheduler
    - helm lint .

rpm:
  image: $BUILD_IMAGE_NAME
  stage: rpm
  artifacts:
    paths:
      - out/*.rpm
  dependencies:
    - build
  needs:
    - build
  script:
    - cd out
    - cmake -DASSFIRE_PACKAGE_BUILD_RPM=ON $CMAKE_OPTIONS ../
    - make package

docker-server:
  image: docker:stable
  services:
    - docker:dind
  variables:
    IMAGE_TAG_NAME: latest
  stage: docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build out -f out/apps/scheduler/Dockerfile -t $CI_REGISTRY/assfire/assfire-suite/assfire-scheduler:$TEMP_IMAGE_TAG_NAME
    - docker push $CI_REGISTRY/assfire/assfire-suite/assfire-scheduler:$TEMP_IMAGE_TAG_NAME
  dependencies:
    - build
    - rpm
  needs:
    - build
    - test
    - rpm

docker-server-push:
  image: docker:stable
  services:
    - docker:dind
  stage: publish
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY/assfire/assfire-suite/assfire-scheduler:$TEMP_IMAGE_TAG_NAME
    - docker tag $CI_REGISTRY/assfire/assfire-suite/assfire-scheduler:$TEMP_IMAGE_TAG_NAME $CI_REGISTRY/assfire/assfire-suite/assfire-scheduler:${APPLICATION_VERSION}
    - docker push $CI_REGISTRY/assfire/assfire-suite/assfire-scheduler:${APPLICATION_VERSION}
  only:
    refs:
      - tags
  needs:
    - docker-server

helm:
  image: $BUILD_IMAGE_NAME
  variables:
    HELM_EXPERIMENTAL_OCI: 1
  stage: publish
  only:
    - tags
  script:
    - cd out/apps/scheduler/helm/assfire-scheduler/
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - helm package . assfire-scheduler:${APPLICATION_VERSION}
    - helm push assfire-scheduler-${APPLICATION_VERSION}.tgz $CI_REGISTRY/assfire/assfire-suite/helm
  dependencies:
    - build
  needs:
    - build
    - docker-server

deploy:
  only:
    - tags
  when: manual
  variables:
    HELM_EXPERIMENTAL_OCI: 1
  tags:
    - assfire-deployment-node
  stage:
    deploy
  script:
    - helm registry login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - helm chart pull $CI_REGISTRY/assfire/assfire-suite/helm/assfire-scheduler:${APPLICATION_VERSION}
    - helm chart export $CI_REGISTRY/assfire/assfire-suite/helm/assfire-scheduler:${APPLICATION_VERSION}
    - helm upgrade -i assfire-scheduler -n assfire ./assfire-scheduler
  dependencies:
    - docker-server-push
    - helm
  needs:
    - docker-server-push
    - helm